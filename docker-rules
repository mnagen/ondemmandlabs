
https://medium.com/bb-tutorials-and-thoughts/250-practice-questions-for-the-dca-exam-84f3b9e8f5ce

https://goharbor.io/


docker volumes

------------------------

Cotainers are immutable, once you've deployed the container, it cannot be changed, untily you re-deploy

if you want to make some configuration changes or version upgrades, you need to redeploy the container

usuallu by default all files created inside a container are stored on a writable container layer

the data generated by volumes is  no longer available when the container  no loner exists, also it would be difficult to get the data out of the contianer if it is required by any other process

we need to preserve the data when we are restarting the containers or destroying the contianer

----solution

docker gives us two options to store the files on the host machine to persist the data even after the container is stopped

1) Volumes
2) Bind Mounts


Volumes are stored in part of the host file system managed by docker

volumes are created and managed by containers

volumes are created by the Volume command in Docker File

when you create a volume, it is stored within a directory on the docker host machine

volumes cannot be removed when the user destroys the containers


running  amysql image
docker run -d  --name mysqldb -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql

docker inspect mysqldb

in the "Mounts" section you ccan see the source the location of mount, it is writing the data at this location

you can copy the /var/lib/volumes and csee


cd var/lib/volumes


you can check how many volumes are created

docker volume ls


docker volume inspect volumeid


-------------

docker run -d  --name mysqldb -e MYSQL_ALLOW_EMPTY_PASSWORD=True  --mount source=mysqldb destination=var/lib/mysql mysql

docker volume ls
----------------------------persistent data, Bind mounts-------------------------------

Bind Mounts: Bind mounts means a  file or directory on the host machine is mounted into a container



Bind mounts may be stored anywhere on the host system

Non-Docker processes on the docker host or a docker container can modify them at anytime

Bind mount can't be use in DockerFile

----------Good-use-----------BindMounts

Sharing configuration files from the host machine to containers

Sharing a source code or build artificats between a development environment on
the docker host and a container


*****

  Creating a bound mount

docker container run -d --name nginxbind --mount type=bind, source=$(pwd), target=/app ngix








Host

you can run a kernel with grsecurity and PaX.


	Docker

Execute the below command on the docker host and ensure that only trusted users are members of the docker group. getent group docker

getent group docker


Verify that there is an audit rule for Docker daemon. For example, execute below command: 

auditctl -l | grep /usr/bin/docker

This should list a rule for Docker daemon.
Remediation:
Add a rule for Docker daemon.
For example,
Add the line as below line in /etc/audit/audit.rules file: -w /usr/bin/docker -k docker
Then, restart the audit daemon. For example,

service auditd restart


Verify that there is an audit rule corresponding to /var/lib/docker directory.
For example, execute below command: auditctl -l | grep /var/lib/docker

Add a rule for /var/lib/docker directory.
For example,
Add the line as below in /etc/audit/audit.rules file: -w /var/lib/docker -k docker
Then, restart the audit daemon. For example, service auditd restart


Verify that there is an audit rule corresponding to /etc/docker directory.(scored)*********
For example, execute below command: auditctl -l | grep /etc/docker
This should list a rule for /etc/docker directory.
Remediation:
Add a rule for /etc/docker directory.
For example,
Add the line as below in /etc/audit/audit.rules file: -w /etc/docker -k docker
Then, restart the audit daemon. For example, service auditd restart
